{"version":3,"sources":["store/ApolloContext.js","store/QueryContext.js","components/TopBar/Searcher/index.tsx","components/TopBar/index.tsx","components/Landing/Intro/index.tsx","components/ErrorView/index.tsx","components/LoadingView/index.tsx","components/ModalView/EntityView/CharacterView.tsx","components/ModalView/EntityView/LocationView.tsx","components/ModalView/EntityView/EpisodeView.tsx","components/ModalView/EntityView/index.tsx","components/ModalView/index.tsx","components/SearchResult/GridView/ItemView/index.tsx","components/SearchResult/Paginator/index.tsx","components/SearchResult/GridView/index.tsx","components/SearchResult/QueryComponents/Characters.tsx","components/SearchResult/QueryComponents/Locations.tsx","components/SearchResult/QueryComponents/Episodes.tsx","components/SearchResult/index.tsx","components/Landing/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ApolloContext","createContext","displayName","ApolloClientProvider","children","apolloClient","createApolloClient","Provider","client","user","ApolloClient","uri","headers","Authorization","cache","InMemoryCache","QueryContext","QueryProvider","useState","entity","filterOption","searchString","filter","name","extra","page","ready","modalItem","open","itemID","query","setQuery","console","log","value","clearQuery","setEntity","setNameFilter","setExtraFilter","setSearchString","length","nextPage","closeModalItem","openModalItem","useQueryContext","useContext","StyledGrid","styled","Grid","StyledInput","InputBase","StyledIconSearch","Search","StyledIconFilter","FilterListOutlined","StyledFormControlLabel","FormControlLabel","StyledPaper","Paper","StyledItemGrid","StyledItemFilterGrid","Searcher","props","container","direction","justify","alignItems","item","ToggleButtonGroup","size","exclusive","onChange","event","newValue","ToggleButton","target","placeholder","inputProps","Typography","label","labelPlacement","control","Switch","checked","color","Tooltip","title","leaveDelay","IconButton","onClick","aria-label","ClearOutlined","StyledAppBar","AppBar","TopBar","position","Toolbar","Intro","component","variant","align","gutterBottom","paragraph","Link","href","ErrorView","LinearProgress","LoadingView","Backdrop","StyledCard","Card","StyledCardContent","CardContent","StyledCardMedia","CardMedia","StyledChip","Chip","CharacterView","character","image","episode","origin","location","gender","type","status","species","map","ep","i","key","LocationView","created","dimension","residents","res","avatar","Avatar","src","EpisodesView","air_date","characters","char","GET_CHARACTER","gql","GET_EPISODE","GET_LOCATION","connectQuery","locations","episodes","EntityView","useQuery","variables","id","loading","error","data","EpisodeView","ModalView","Modal","onClose","ItemView","xs","sm","md","CardActionArea","openItem","Button","disabled","StyledContainer","Container","Paginator","pages","Pagination","count","StyledPaperPaginator","GridView","collectionResult","spacing","GET_CHARACTERS","Characters","nameFilter","typeFilter","results","info","GET_LOCATIONS","Locations","dimensionFilter","GET_EPISODES","Episodes","episodeFilter","SearchResult","searchResult","Fragment","Landing","App","CssBaseline","StylesProvider","injectFirst","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.770dc545.chunk.js","sourcesContent":["import React, { createContext, useContext } from 'react';\r\nimport { ApolloProvider } from '@apollo/client';\r\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @description Apollo Context is responsible for Inject the Client as provider for use with UseQuery Hook.\r\n * @return {provider}\r\n */\r\n\r\nexport const ApolloContext = createContext();\r\nApolloContext.displayName = 'ApolloContext';\r\n\r\nexport const ApolloClientProvider = ({ children }) => {\r\n  const apolloClient = createApolloClient();\r\n\r\n  return (\r\n    <ApolloContext.Provider>\r\n      <ApolloProvider client={apolloClient}>{children}</ApolloProvider>\r\n    </ApolloContext.Provider>\r\n  );\r\n};\r\n\r\nexport default function useApolloContext() {\r\n  return useContext(ApolloContext);\r\n}\r\n\r\nexport const createApolloClient = (user) => {\r\n  return new ApolloClient({\r\n    uri: 'https://rickandmortyapi.com/graphql',\r\n    headers: { Authorization: null },\r\n    cache: new InMemoryCache(),\r\n  });\r\n};\r\n\r\nApolloClientProvider.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n","import React, { createContext, useContext, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @description Query Context is responsible for Inject the User Query as provider for use as a Hook in all App Context.\r\n * @return {provider}\r\n */\r\n\r\nexport const QueryContext = createContext();\r\nQueryContext.displayName = 'QueryContext';\r\n\r\nexport const QueryProvider = ({ children }) => {\r\n  const [query, setQuery] = useState({\r\n    entity: 'characters',\r\n    filterOption: 'Type',\r\n    searchString: '',\r\n    filter: {\r\n      name: true,\r\n      extra: false,\r\n    },\r\n    page: 1,\r\n    ready: false,\r\n    modalItem: {\r\n      open: false,\r\n      itemID: '',\r\n    },\r\n  });\r\n\r\n  const clearQuery = () => {\r\n    setQuery({\r\n      entity: 'characters',\r\n      filterOption: 'Type',\r\n      searchString: '',\r\n      filter: {\r\n        name: true,\r\n        extra: false,\r\n      },\r\n      page: 1,\r\n      ready: false,\r\n      modalItem: {\r\n        open: false,\r\n        itemID: '',\r\n      },\r\n    });\r\n  };\r\n  const setNameFilter = (name) => {\r\n    setQuery({ ...query, filter: { ...query.filter, name } });\r\n  };\r\n  const setExtraFilter = (extra) => {\r\n    setQuery({ ...query, filter: { ...query.filter, extra } });\r\n  };\r\n\r\n  const setSearchString = (searchString) => {\r\n    let ready = searchString.length > 2;\r\n    setQuery({ ...query, searchString, ready });\r\n  };\r\n\r\n  const setEntity = (entity) => {\r\n    let filterOption =\r\n      entity === 'characters'\r\n        ? 'Type'\r\n        : entity === 'episodes'\r\n        ? 'Episode'\r\n        : 'Dimension';\r\n    setQuery({\r\n      ...query,\r\n      entity,\r\n      filterOption,\r\n      page: 1,\r\n      filter: { name: true, extra: false },\r\n    });\r\n  };\r\n\r\n  const nextPage = (page) => {\r\n    setQuery({ ...query, page });\r\n  };\r\n\r\n  const closeModalItem = () => {\r\n    setQuery({ ...query, modalItem: { open: false, itemID: '' } });\r\n  };\r\n\r\n  const openModalItem = (itemID) => {\r\n    setQuery({ ...query, modalItem: { open: true, itemID } });\r\n  };\r\n  console.log(query);\r\n  return (\r\n    <QueryContext.Provider\r\n      value={{\r\n        query,\r\n        setQuery,\r\n        clearQuery,\r\n        setEntity,\r\n        setNameFilter,\r\n        setExtraFilter,\r\n        setSearchString,\r\n        nextPage,\r\n        closeModalItem,\r\n        openModalItem,\r\n      }}\r\n    >\r\n      {children}\r\n    </QueryContext.Provider>\r\n  );\r\n};\r\n\r\nexport default function useQueryContext() {\r\n  return useContext(QueryContext);\r\n}\r\n\r\nQueryProvider.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n  Typography,\r\n  Paper,\r\n  IconButton,\r\n  InputBase,\r\n  FormControlLabel,\r\n  Switch,\r\n  Grid,\r\n  Tooltip,\r\n} from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport { FilterListOutlined, Search, ClearOutlined } from '@material-ui/icons';\r\n\r\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\r\n\r\nimport useQueryContext from '../../../store/QueryContext';\r\n\r\nconst StyledGrid = styled(Grid)`\r\n  padding: 2px 4px;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyledInput = styled(InputBase)`\r\n  margin-left: 10px;\r\n  padding-right: 10px;\r\n  flex: 1;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledIconSearch = styled(Search)`\r\n  margin-left: 10px;\r\n`;\r\nconst StyledIconFilter = styled(FilterListOutlined)`\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n`;\r\nconst StyledFormControlLabel = styled(FormControlLabel)`\r\n  margin-left: 6px;\r\n  margin-right: 2px;\r\n`;\r\nconst StyledPaper = styled(Paper)`\r\n  display: flex;\r\n  height: 38px;\r\n  margin: 4px;\r\n  flex: 1;\r\n  align-content: center;\r\n  align-items: center;\r\n`;\r\nconst StyledItemGrid = styled(Grid)`\r\n  width: 276px;\r\n  max-width: 280px;\r\n`;\r\nconst StyledItemFilterGrid = styled(Grid)`\r\n  min-width: 220px;\r\n  width: 220px;\r\n  max-width: 280px;\r\n`;\r\ninterface SearcherProps {}\r\n\r\nconst Searcher: React.SFC<SearcherProps> = (props) => {\r\n  const {\r\n    query,\r\n    clearQuery,\r\n    setSearchString,\r\n    setEntity,\r\n    setExtraFilter,\r\n  } = useQueryContext();\r\n\r\n  const handleExtraFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setExtraFilter(event.target.checked);\r\n  };\r\n\r\n  const handleString = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchString(event.target.value);\r\n  };\r\n  const handleEntity = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    newValue: string\r\n  ) => {\r\n    setEntity(newValue);\r\n  };\r\n  const clearQueryData = () => clearQuery();\r\n\r\n  return (\r\n    <StyledGrid container direction='row' justify='center' alignItems='center'>\r\n      <StyledItemGrid item>\r\n        <StyledPaper>\r\n          <ToggleButtonGroup\r\n            size='small'\r\n            value={query.entity}\r\n            exclusive\r\n            onChange={handleEntity}\r\n          >\r\n            <ToggleButton value='characters'>Characters</ToggleButton>\r\n            <ToggleButton value='locations'>Locations</ToggleButton>\r\n            <ToggleButton value='episodes'>Episodes</ToggleButton>\r\n          </ToggleButtonGroup>\r\n        </StyledPaper>\r\n      </StyledItemGrid>\r\n      <StyledItemGrid item>\r\n        <StyledPaper>\r\n          <StyledIconSearch />\r\n          <StyledInput\r\n            value={query.searchString}\r\n            onChange={handleString}\r\n            placeholder='Search in Rick And Morty'\r\n            inputProps={{ 'aria-label': 'Search in Rick And Morty' }}\r\n          />\r\n        </StyledPaper>\r\n      </StyledItemGrid>\r\n\r\n      <StyledItemFilterGrid item>\r\n        <StyledPaper>\r\n          <StyledIconFilter />\r\n          <Typography>Filter By</Typography>\r\n          {/* <FormControlLabel\r\n            control={\r\n              <Switch\r\n                size='small'\r\n                checked={query.nameFilter}\r\n                onChange={handleNameFilter}\r\n                color='primary'\r\n                name='nameFilter'\r\n              />\r\n            }\r\n            label='Name'\r\n          /> */}\r\n          <StyledFormControlLabel\r\n            label={query.filterOption}\r\n            labelPlacement='start'\r\n            control={\r\n              <Switch\r\n                size='small'\r\n                checked={query.filter.extra}\r\n                color='primary'\r\n                onChange={handleExtraFilter}\r\n                name={query.filterOption}\r\n              />\r\n            }\r\n          />\r\n        </StyledPaper>\r\n      </StyledItemFilterGrid>\r\n\r\n      <Grid item>\r\n        <Tooltip title='Clear Search' leaveDelay={300}>\r\n          <StyledPaper>\r\n            <IconButton\r\n              onClick={clearQueryData}\r\n              color='secondary'\r\n              aria-label='clear all'\r\n            >\r\n              <ClearOutlined color='primary' />\r\n            </IconButton>\r\n          </StyledPaper>\r\n        </Tooltip>\r\n      </Grid>\r\n    </StyledGrid>\r\n  );\r\n};\r\n\r\nexport default Searcher;\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { AppBar, Toolbar } from '@material-ui/core';\r\n\r\nimport Searcher from './Searcher';\r\n\r\nconst StyledAppBar = styled(AppBar)`\r\n  flex-grow: 1;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n/**\r\n * @description TopBar that support the Searcher Component.\r\n * @return {component}\r\n */\r\n\r\ninterface TopBarProps {}\r\n\r\nconst TopBar: React.SFC<TopBarProps> = (props) => {\r\n  return (\r\n    <StyledAppBar position='static'>\r\n      <Toolbar>\r\n        <Searcher />\r\n      </Toolbar>\r\n    </StyledAppBar>\r\n  );\r\n};\r\n\r\nexport default TopBar;\r\n","import * as React from 'react';\r\nimport { Typography, Paper, Link } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledPaper = styled(Paper)`\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: auto;\r\n  margin-top: 20px;\r\n  min-width: 300px;\r\n  max-width: 600px;\r\n  padding: 10px;\r\n`;\r\n\r\n/**\r\n * @description Welcome Screen with project introduction.\r\n * @return {component}\r\n */\r\n\r\ninterface IntroProps {}\r\n\r\nconst Intro: React.SFC<IntroProps> = (props) => {\r\n  return (\r\n    <StyledPaper>\r\n      <Typography\r\n        component='h1'\r\n        variant='h2'\r\n        align='center'\r\n        color='textPrimary'\r\n        gutterBottom\r\n      >\r\n        Find anything of Rick and Morty here!!.\r\n      </Typography>\r\n      <Typography variant='h5' align='center' color='textSecondary' paragraph>\r\n        This project was built for an Challenge of Puzzle Co. Made by Santino\r\n        Zaracho on\r\n        {<Link href='https://github.com/santinozaracho'>GitHub</Link>}, as\r\n        abstract, this WebApp made in React.js, with Apollo-GraphQL shows you\r\n        any content of Rick And Morty serie.\r\n      </Typography>\r\n    </StyledPaper>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","import React from 'react';\r\nimport { Paper, Typography, LinearProgress } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledPaper = styled(Paper)`\r\n  margin: 30px;\r\n`;\r\n\r\ninterface ErrorViewProps {}\r\nconst ErrorView: React.FC<ErrorViewProps> = (props) => {\r\n  return (\r\n    <StyledPaper>\r\n      <LinearProgress variant='determinate' value={100} color='secondary' />\r\n      <Typography\r\n        component='h1'\r\n        variant='h2'\r\n        align='center'\r\n        color='textPrimary'\r\n        gutterBottom\r\n      >\r\n        We're Sorry, We couldn't find that your are searching.\r\n      </Typography>\r\n    </StyledPaper>\r\n  );\r\n};\r\n\r\nexport default ErrorView;\r\n","import React from 'react';\r\nimport { Typography, LinearProgress, Paper, Backdrop } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\n/**\r\n * @description Loading Component, renders a PorgressLine to indicate when the component is retrieving data.\r\n * @return {component}\r\n */\r\n\r\nconst StyledPaper = styled(Paper)`\r\n  margin: 30px;\r\n`;\r\n\r\ninterface LoadingViewProps {}\r\nconst LoadingView: React.FC<LoadingViewProps> = (props) => {\r\n  return (\r\n    <Backdrop open={true}>\r\n      <StyledPaper>\r\n        <LinearProgress color='secondary' />\r\n        <Typography\r\n          component='h1'\r\n          variant='h2'\r\n          align='center'\r\n          color='textPrimary'\r\n          gutterBottom\r\n        >\r\n          Loading.\r\n        </Typography>\r\n      </StyledPaper>\r\n    </Backdrop>\r\n  );\r\n};\r\n\r\nexport default LoadingView;\r\n","import React from 'react';\r\nimport {\r\n  CardContent,\r\n  Typography,\r\n  Card,\r\n  CardMedia,\r\n  Chip,\r\n} from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\n/**\r\n * @description This component is responsible for render the fields of Character.\r\n * @return {component}\r\n */\r\n\r\ninterface CharacterViewProps {\r\n  character: {\r\n    image: string;\r\n    name: string;\r\n    episode: [{ name: string }];\r\n    origin: { name: string };\r\n    location: { name: string };\r\n    status: string;\r\n    type: string;\r\n    gender: string;\r\n    species: string;\r\n  };\r\n}\r\n\r\n// const StyledPaper = styled(Paper)`\r\n//   display: flex;\r\n//   align-items: center;\r\n//   justify-content: center;\r\n//   margin: auto;\r\n//   margin-top: 20px;\r\n//   min-width: 300px;\r\n//   max-width: 600px;\r\n// `;\r\nconst StyledCard = styled(Card)`\r\n  height: 100%;\r\n  width: 100%;\r\n  margin: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledCardContent = styled(CardContent)`\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst StyledCardMedia = styled(CardMedia)`\r\n  padding-top: 56.25%;\r\n`;\r\nconst StyledChip = styled(Chip)`\r\n  margin: 5px;\r\n`;\r\n\r\nconst CharacterView: React.FC<CharacterViewProps> = (props) => {\r\n  let {\r\n    image,\r\n    name,\r\n    episode,\r\n    origin,\r\n    location,\r\n    gender,\r\n    type,\r\n    status,\r\n    species,\r\n  } = props.character;\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardMedia image={image} title={name} />\r\n\r\n      <StyledCardContent>\r\n        <Typography gutterBottom variant='h5' component='h2'>\r\n          {name}\r\n        </Typography>\r\n        <Typography>Type: {type}</Typography>\r\n        <Typography>Gender: {gender}</Typography>\r\n        <Typography>Status: {status}</Typography>\r\n        <Typography>Species: {species}</Typography>\r\n        <Typography>Origin: {origin.name}</Typography>\r\n        <Typography>Location: {location.name}</Typography>\r\n        <Typography>Episodes:</Typography>\r\n        {episode.map((ep, i) => (\r\n          <StyledChip key={i} label={ep.name} />\r\n        ))}\r\n      </StyledCardContent>\r\n    </StyledCard>\r\n  );\r\n};\r\n\r\nexport default CharacterView;\r\n","import React from 'react';\r\nimport { CardContent, Typography, Card, Chip, Avatar } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\n/**\r\n * @description This component is responsible for render the fields of Location.\r\n * @return {component}\r\n */\r\n\r\ninterface LocationViewProps {\r\n  location: {\r\n    name: string;\r\n    dimension: string;\r\n    residents: [{ name: string; image: string }];\r\n    type: string;\r\n    created: string;\r\n  };\r\n}\r\n\r\n// const StyledPaper = styled(Paper)`\r\n//   display: flex;\r\n//   align-items: center;\r\n//   justify-content: center;\r\n//   margin: auto;\r\n//   margin-top: 20px;\r\n//   min-width: 300px;\r\n//   max-width: 600px;\r\n// `;\r\nconst StyledCard = styled(Card)`\r\n  height: 100%;\r\n  width: 100%;\r\n  margin: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledCardContent = styled(CardContent)`\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst StyledChip = styled(Chip)`\r\n  margin: 5px;\r\n`;\r\nconst LocationView: React.FC<LocationViewProps> = (props) => {\r\n  let { name, type, created, dimension, residents } = props.location;\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardContent>\r\n        <Typography gutterBottom variant='h5' component='h2'>\r\n          {name}\r\n        </Typography>\r\n        <Typography>Type: {type}</Typography>\r\n        <Typography>Dimension: {dimension}</Typography>\r\n        <Typography>Created: {created}</Typography>\r\n        <Typography>Residents:</Typography>\r\n        {residents.map((res, i) => (\r\n          <StyledChip\r\n            key={i}\r\n            variant='outlined'\r\n            avatar={<Avatar src={res.image} />}\r\n            label={res.name}\r\n          />\r\n        ))}\r\n      </StyledCardContent>\r\n    </StyledCard>\r\n  );\r\n};\r\n\r\nexport default LocationView;\r\n","import React from 'react';\r\nimport { CardContent, Typography, Card, Chip, Avatar } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\n/**\r\n * @description This component is responsible for render the fields of Episode.\r\n * @return {component}\r\n */\r\n\r\ninterface EpisodesViewProps {\r\n  episode: {\r\n    episode: string;\r\n    name: string;\r\n    characters: [{ name: string; image: string }];\r\n    air_date: string;\r\n    created: string;\r\n  };\r\n}\r\n\r\n// const StyledPaper = styled(Paper)`\r\n//   display: flex;\r\n//   align-items: center;\r\n//   justify-content: center;\r\n//   margin: auto;\r\n//   margin-top: 20px;\r\n//   min-width: 300px;\r\n//   max-width: 600px;\r\n// `;\r\nconst StyledCard = styled(Card)`\r\n  height: 100%;\r\n  width: 100%;\r\n  margin: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledCardContent = styled(CardContent)`\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst StyledChip = styled(Chip)`\r\n  margin: 5px;\r\n`;\r\n\r\nconst EpisodesView: React.FC<EpisodesViewProps> = (props) => {\r\n  let { name, episode, air_date, characters, created } = props.episode;\r\n  return (\r\n    <StyledCard>\r\n      <StyledCardContent>\r\n        <Typography gutterBottom variant='h5' component='h2'>\r\n          {name}\r\n        </Typography>\r\n        <Typography>Episode: {episode}</Typography>\r\n        <Typography>Air Date: {air_date}</Typography>\r\n        <Typography>Created: {created}</Typography>\r\n\r\n        <Typography>Characters:</Typography>\r\n        {characters.map((char, i) => (\r\n          <StyledChip\r\n            key={i}\r\n            variant='outlined'\r\n            avatar={<Avatar src={char.image} />}\r\n            label={char.name}\r\n          />\r\n        ))}\r\n      </StyledCardContent>\r\n    </StyledCard>\r\n  );\r\n};\r\n\r\nexport default EpisodesView;\r\n","import React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport useQueryContext from '../../../store/QueryContext';\r\nimport ErrorView from '../../ErrorView';\r\nimport LoadingView from '../../LoadingView';\r\nimport CharacterView from './CharacterView';\r\nimport LocationView from './LocationView';\r\nimport EpisodeView from './EpisodeView';\r\n\r\n/**\r\n * @description This component is responsible for make querys to RandM API and render the correct View.\r\n * @return {component}\r\n */\r\ninterface EntityViewProps {}\r\n\r\nconst GET_CHARACTER = gql`\r\n  query Character($id: ID!) {\r\n    character(id: $id) {\r\n      name\r\n      status\r\n      species\r\n      type\r\n      gender\r\n      origin {\r\n        name\r\n      }\r\n      location {\r\n        name\r\n      }\r\n      image\r\n      episode {\r\n        name\r\n        episode\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GET_EPISODE = gql`\r\n  query Epidose($id: ID!) {\r\n    episode(id: $id) {\r\n      name\r\n      air_date\r\n      episode\r\n      characters {\r\n        name\r\n        image\r\n      }\r\n      created\r\n    }\r\n  }\r\n`;\r\nconst GET_LOCATION = gql`\r\n  query Location($id: ID!) {\r\n    location(id: $id) {\r\n      name\r\n      type\r\n      dimension\r\n      residents {\r\n        name\r\n        image\r\n      }\r\n      created\r\n    }\r\n  }\r\n`;\r\n\r\n// const StyledPaper = styled(Paper)`\r\n//   display: flex;\r\n//   align-items: center;\r\n//   justify-content: center;\r\n//   margin: auto;\r\n//   margin-top: 20px;\r\n//   min-width: 300px;\r\n//   max-width: 600px;\r\n// `;\r\n\r\nconst connectQuery: any = {\r\n  characters: () => GET_CHARACTER,\r\n\r\n  locations: () => GET_LOCATION,\r\n\r\n  episodes: () => GET_EPISODE,\r\n};\r\n\r\nconst EntityView: React.FC<EntityViewProps> = (props) => {\r\n  const { query } = useQueryContext();\r\n\r\n  let { entity, modalItem } = query;\r\n\r\n  const { loading, error, data } = useQuery(connectQuery[entity](), {\r\n    variables: {\r\n      id: modalItem.itemID,\r\n    },\r\n  });\r\n  console.log(entity, modalItem.itemID);\r\n  console.log(error);\r\n  console.log(data);\r\n\r\n  if (loading) return <LoadingView />;\r\n  if (error) return <ErrorView />;\r\n\r\n  let { character, location, episode } = data;\r\n\r\n  if (character) return <CharacterView character={character} />;\r\n  if (location) return <LocationView location={location} />;\r\n  if (episode) return <EpisodeView episode={episode} />;\r\n\r\n  return <ErrorView />;\r\n};\r\n\r\nexport default EntityView;\r\n","import React from 'react';\r\nimport { Modal, Paper } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport useQueryContext from '../../store/QueryContext';\r\nimport EntityView from './EntityView';\r\n\r\n/**\r\n * @description Modal View is only responsible for mount the Modal and render the Body.\r\n * @return {component}\r\n */\r\n\r\ninterface ModalViewProps {}\r\n\r\nconst StyledPaper = styled(Paper)`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: auto;\r\n  margin-top: 20px;\r\n  min-width: 300px;\r\n  max-width: 600px;\r\n  max-height: 600px;\r\n  overflow-y: scroll;\r\n  ::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst ModalView: React.FC<ModalViewProps> = (props) => {\r\n  const { query, closeModalItem } = useQueryContext();\r\n\r\n  const closeModal = () => closeModalItem();\r\n\r\n  return (\r\n    <Modal open={query.modalItem.open} onClose={closeModal}>\r\n      <StyledPaper>\r\n        <EntityView />\r\n      </StyledPaper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalView;\r\n","import React from 'react';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardMedia,\r\n  Grid,\r\n  Typography,\r\n  CardActionArea,\r\n} from '@material-ui/core';\r\nimport styled from 'styled-components';\r\n\r\nimport useQueryContext from '../../../../store/QueryContext';\r\n\r\n/**\r\n * @description Item View is responsible for render the items card in Grid View.\r\n * @return {component}\r\n */\r\n\r\ninterface ItemViewProps {\r\n  item: {\r\n    id: string;\r\n    name: string;\r\n    episode: string;\r\n    dimension: string;\r\n    image: string;\r\n  };\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledCardContent = styled(CardContent)`\r\n  flex-grow: 1;\r\n`;\r\n\r\nconst StyledCardMedia = styled(CardMedia)`\r\n  padding-top: 56.25%;\r\n`;\r\n\r\nconst ItemView: React.FC<ItemViewProps> = ({ item }) => {\r\n  const { id, image, name, dimension, episode } = item;\r\n  const { openModalItem } = useQueryContext();\r\n  const openItem = (id: string) => openModalItem(id);\r\n  return (\r\n    <Grid item key={id} xs={12} sm={6} md={4}>\r\n      <CardActionArea onClick={() => openItem(id)}>\r\n        <StyledCard>\r\n          {item.image && <StyledCardMedia image={image} title={name} />}\r\n\r\n          <StyledCardContent>\r\n            <Typography gutterBottom variant='h5' component='h2'>\r\n              {name}\r\n            </Typography>\r\n            {episode && <Typography>{episode}</Typography>}\r\n            {dimension && <Typography>{dimension}</Typography>}\r\n          </StyledCardContent>\r\n\r\n          <Button disabled>View Details</Button>\r\n        </StyledCard>\r\n      </CardActionArea>\r\n    </Grid>\r\n  );\r\n};\r\nexport default ItemView;\r\n","import * as React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport useQueryContext from '../../../store/QueryContext';\r\n\r\n/**\r\n * @description Paginator is responsabile for render the Pagination of the query.\r\n * @return {component}\r\n */\r\n\r\nconst StyledContainer = styled(Container)`\r\n  background-color: #fafafa;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 30px;\r\n  margin-top: 20px;\r\n  margin-bottom: 0px;\r\n`;\r\n\r\ninterface PaginatorProps {\r\n  pages: number;\r\n}\r\nconst Paginator: React.SFC<PaginatorProps> = ({ pages }) => {\r\n  const { query, nextPage } = useQueryContext();\r\n  const handlePage = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    nextPage(value);\r\n  };\r\n  return (\r\n    <StyledContainer>\r\n      <Pagination count={pages} page={query.page} onChange={handlePage} />\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\nexport default Paginator;\r\n","import React from 'react';\r\nimport { Grid, Paper, Container } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport ItemView from './ItemView';\r\nimport Paginator from '../Paginator';\r\n\r\n/**\r\n * @description Grid View is responsible render the Grid for Items Views and the Paginator.\r\n * @return {component}\r\n */\r\n\r\ninterface GridViewProps {\r\n  collectionResult: Array<Object>;\r\n  pages: number;\r\n}\r\n\r\nconst StyledPaper = styled(Paper)`\r\n  padding: 30px;\r\n`;\r\nconst StyledPaperPaginator = styled(Paper)`\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst GridView: React.FC<GridViewProps> = ({ collectionResult, pages }) => {\r\n  return (\r\n    <Container>\r\n      <StyledPaper>\r\n        <Grid container spacing={4}>\r\n          {collectionResult.map((item: any) => (\r\n            <ItemView item={item} />\r\n          ))}\r\n        </Grid>\r\n      </StyledPaper>\r\n      <StyledPaperPaginator>\r\n        <Paginator pages={pages} />\r\n      </StyledPaperPaginator>\r\n    </Container>\r\n  );\r\n};\r\nexport default GridView;\r\n","import React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport GridView from '../GridView';\r\nimport useQueryContext from '../../../store/QueryContext';\r\nimport ErrorView from '../../ErrorView';\r\nimport LoadingView from '../../LoadingView';\r\n\r\n/**\r\n * @description Characters Component is responsible for Query Characters to API and render the Grid View.\r\n * @return {component}\r\n */\r\n\r\ninterface CharactersProps {}\r\n\r\nexport const GET_CHARACTERS = gql`\r\n  query Characters($page: Int!, $nameFilter: String, $typeFilter: String) {\r\n    characters(page: $page, filter: { name: $nameFilter, type: $typeFilter }) {\r\n      info {\r\n        next\r\n        count\r\n        pages\r\n      }\r\n      results {\r\n        id\r\n        name\r\n        image\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Characters: React.FC<CharactersProps> = (props) => {\r\n  const { query } = useQueryContext();\r\n  const { loading, error, data } = useQuery(GET_CHARACTERS, {\r\n    variables: {\r\n      page: query.page,\r\n      nameFilter: query.filter.extra ? '' : query.searchString,\r\n      typeFilter: query.filter.extra ? query.searchString : '',\r\n    },\r\n  });\r\n  if (loading) return <LoadingView />;\r\n  if (error) return <ErrorView />;\r\n\r\n  return (\r\n    <GridView\r\n      collectionResult={data.characters.results}\r\n      pages={data.characters.info.pages}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Characters;\r\n","import React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport GridView from '../GridView';\r\nimport useQueryContext from '../../../store/QueryContext';\r\nimport ErrorView from '../../ErrorView';\r\nimport LoadingView from '../../LoadingView';\r\n\r\n/**\r\n * @description Locations Component is responsible for Query Locations to API and render the Grid View.\r\n * @return {component}\r\n */\r\n\r\ninterface LocationsProps {}\r\n\r\nexport const GET_LOCATIONS = gql`\r\n  query Locations($page: Int!, $nameFilter: String, $dimensionFilter: String) {\r\n    locations(\r\n      page: $page\r\n      filter: { name: $nameFilter, dimension: $dimensionFilter }\r\n    ) {\r\n      info {\r\n        next\r\n        count\r\n        pages\r\n      }\r\n      results {\r\n        id\r\n        name\r\n        dimension\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Locations: React.FC<LocationsProps> = (props) => {\r\n  const { query } = useQueryContext();\r\n  const { loading, error, data } = useQuery(GET_LOCATIONS, {\r\n    variables: {\r\n      page: query.page,\r\n      nameFilter: query.filter.extra ? '' : query.searchString,\r\n      dimensionFilter: query.filter.extra ? query.searchString : '',\r\n    },\r\n  });\r\n  if (loading) return <LoadingView />;\r\n  if (error) return <ErrorView />;\r\n\r\n  return (\r\n    <GridView\r\n      collectionResult={data.locations.results}\r\n      pages={data.locations.info.pages}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Locations;\r\n","import React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport GridView from '../GridView';\r\nimport useQueryContext from '../../../store/QueryContext';\r\nimport ErrorView from '../../ErrorView';\r\nimport LoadingView from '../../LoadingView';\r\n\r\n/**\r\n * @description Episodes Component is responsible for Query Episodes to API and render the Grid View.\r\n * @return {component}\r\n */\r\n\r\ninterface EpisodesProps {}\r\n\r\nexport const GET_EPISODES = gql`\r\n  query Episodes($page: Int!, $nameFilter: String, $episodeFilter: String) {\r\n    episodes(\r\n      page: $page\r\n      filter: { name: $nameFilter, episode: $episodeFilter }\r\n    ) {\r\n      info {\r\n        next\r\n        count\r\n        pages\r\n      }\r\n      results {\r\n        id\r\n        episode\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst Episodes: React.FC<EpisodesProps> = (props) => {\r\n  const { query } = useQueryContext();\r\n  const { loading, error, data } = useQuery(GET_EPISODES, {\r\n    variables: {\r\n      page: query.page,\r\n      nameFilter: query.filter.extra ? '' : query.searchString,\r\n      episodeFilter: query.filter.extra ? query.searchString : '',\r\n    },\r\n  });\r\n  if (loading) return <LoadingView />;\r\n  if (error) return <ErrorView />;\r\n  return (\r\n    <GridView\r\n      collectionResult={data.episodes.results}\r\n      pages={data.episodes.info.pages}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Episodes;\r\n","import React from 'react';\r\nimport useQueryContext from '../../store/QueryContext';\r\nimport ModalView from '../ModalView';\r\nimport Characters from './QueryComponents/Characters';\r\nimport Locations from './QueryComponents/Locations';\r\nimport Episodes from './QueryComponents/Episodes';\r\n\r\n/**\r\n * @description Search Result Component is responsible for render selected component by entity requeried in the TopBar and Support the Modal.\r\n * @return {component}\r\n */\r\n\r\ninterface SearchResultProps {}\r\n\r\nconst connectQuery: any = {\r\n  characters: () => <Characters />,\r\n\r\n  locations: () => <Locations />,\r\n\r\n  episodes: () => <Episodes />,\r\n};\r\n\r\nconst SearchResult: React.FC<SearchResultProps> = (props) => {\r\n  const { query } = useQueryContext();\r\n  const searchResult = connectQuery[query.entity]();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ModalView />\r\n      {searchResult}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n","import React from 'react';\r\nimport TopBar from '../TopBar';\r\nimport Intro from './Intro';\r\nimport SearchResult from '../SearchResult';\r\nimport useQueryContext from '../../store/QueryContext';\r\nimport styled from 'styled-components';\r\nimport { Container } from '@material-ui/core';\r\n\r\n/**\r\n * @description Landing Component, is responsible for shows to user the result of the search or the Welcome Component..\r\n * @return {component}\r\n */\r\n\r\nconst StyledContainer = styled(Container)`\r\n  flex-grow: 1;\r\n  justify-content: center;\r\n  margin: auto;\r\n  padding: 16px;\r\n  align-items: center;\r\n`;\r\n\r\nexport default function Landing() {\r\n  const { query } = useQueryContext();\r\n\r\n  return (\r\n    <StyledContainer>\r\n      <TopBar />\r\n      <StyledContainer>\r\n        {query.ready ? <SearchResult /> : <Intro />}\r\n      </StyledContainer>\r\n    </StyledContainer>\r\n  );\r\n}\r\n","import React from 'react';\nimport { ApolloClientProvider } from './store/ApolloContext';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { StylesProvider } from '@material-ui/core/styles';\n\nimport Landing from './components/Landing';\nimport './App.css';\nimport { QueryProvider } from './store/QueryContext';\n\nconst App = () => {\n  return (\n    <ApolloClientProvider>\n      <QueryProvider>\n        <CssBaseline>\n          <StylesProvider injectFirst>\n            <Landing />\n          </StylesProvider>\n        </CssBaseline>\n      </QueryProvider>\n    </ApolloClientProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}